# 1. Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский язык. Например:
# >>> >>> num_translate("one")
# "один"
# >>> num_translate("eight")
# "восемь"
# Если перевод сделать невозможно, вернуть None. Подумайте, как и где лучше хранить информацию, необходимую для перевода:
# какой тип данных выбрать, в теле функции или снаружи.
# 2. * (вместо задачи 1) Доработать предыдущую функцию num_translate_adv(): реализовать корректную работу с числительными,
# начинающимися с заглавной буквы. Например:
# >>> >>> num_translate_adv("One")
# "Один"
# >>> num_translate_adv("two")
# "два"


# допустим есть последовательные (без пропусков) перечисления числительных на двух языках, их можно насплитить в листы:
Russian = ['один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять', 'десять']
English = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
#  Из листов формируем словарь:
num_word = dict(zip(English, Russian))  # логику придумал сам, а
# способ подсмотрел: https://ru.stackoverflow.com/questions/789625/Как-сделать-словарь-из-двух-списков

# Из общих соображений я бы предпочел сразу формировать примерно такую композицию словаря:
#  num_word = {
# 1: [один, one], ... (un, uno, ...)],
# 2: [два, two], ...(deux, due, ...)]
# ...
# n: ... }
# где по вертикали числа, а по горизонтали, в кортеже, название числа в языках: русском, английском (фра/ита/ итд)
# но решение не пришло сразу - не стал ковыряться: наверное, пока "этот вопрос не по окладу" ...


def num_translate(num):
    num = num.lower()  # нормализация по регистру введенных слов
    trnslt = num_word.get(num)
    if num_word.get(num) is not None:
        print('Переводом слова:', '"', num, '"', 'на русский язык является слово:', '"', trnslt, '"', )
    else:
        print(num_word.get(num), 'Перевод невозможен!')


num = str(input('Введите число для перевода: '))
num_translate(num)
